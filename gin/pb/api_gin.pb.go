// Code generated by github.com/douyu/jupiter/cmd/protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin
// - protoc             v3.6.1

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the github.com/douyu/jupiter/cmd/protoc-gen-go-gin package it is being compiled against.
var _ = http.StatusOK
var _ = new(context.Context)
var _ = metadata.New
var _ = gin.Engine{}

type GreeterGinServer interface {

	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)

	// Sends another greeting
	SayHelloAgain(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterGinServer(r *gin.Engine, srv GreeterGinServer) {
	s := _gin_Greeter{
		server: srv,
		router: r,
	}
	s.registerService()
}

type _gin_Greeter struct {
	server GreeterGinServer
	router *gin.Engine
}

// Sends a greeting
func (s *_gin_Greeter) _gin_handler_SayHello_0(ctx *gin.Context) {
	var in HelloRequest
	if err := ctx.ShouldBindUri(&in); err != nil {
		ctx.Error(err)
		return
	}
	if err := ctx.ShouldBind(&in); err != nil {
		ctx.Error(err)
		return
	}
	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx.Request.Context(), md)
	out, err := s.server.(GreeterGinServer).SayHello(newCtx, &in)
	if err != nil {
		ctx.Error(err)
		return
	}

	ctx.JSON(http.StatusOK, out)
}

// Sends another greeting
func (s *_gin_Greeter) _gin_handler_SayHelloAgain_0(ctx *gin.Context) {
	var in HelloRequest
	if err := ctx.ShouldBindUri(&in); err != nil {
		ctx.Error(err)
		return
	}
	if err := ctx.ShouldBind(&in); err != nil {
		ctx.Error(err)
		return
	}
	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx.Request.Context(), md)
	out, err := s.server.(GreeterGinServer).SayHelloAgain(newCtx, &in)
	if err != nil {
		ctx.Error(err)
		return
	}

	ctx.JSON(http.StatusOK, out)
}

func (s *_gin_Greeter) registerService() {

	// Sends a greeting
	s.router.Handle("POST", "/template.Greeter/SayHello", s._gin_handler_SayHello_0)

	// Sends another greeting
	s.router.Handle("POST", "/template.Greeter/SayHelloAgain", s._gin_handler_SayHelloAgain_0)

}
